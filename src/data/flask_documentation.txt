Flask Documentation Summary

Introduction

Flask is a lightweight web application framework written in Python. It is designed to be quick to set up, with the ability to scale to complex applications. Flask is based on the Werkzeug WSGI toolkit and Jinja2 template engine.

Installation

To install Flask, use the Python package manager pip:

pip install flask

Creating a Simple Flask App
	1.	Import Flask and Create an Application Instance

from flask import Flask
app = Flask(__name__)

	2.	Define Routes and View Functions

Routes determine what URL triggers a function. Use the @app.route decorator to define routes.

@app.route('/')
def hello_world():
    return 'Hello, World!'

	3.	Run the Application

Add the following code to run the app:

if __name__ == '__main__':
    app.run(debug=True)

	•	Note: debug=True enables debug mode, which provides an interactive debugger and restarts the server when code changes.

Running the Application

Execute your script to start the development server:

python your_script.py

	•	Access the app by navigating to http://localhost:5000/ in your web browser.

Routing and URL Variables
	•	Static Routes:

@app.route('/about')
def about():
    return 'About Page'


	•	Dynamic Routes with Variables:

@app.route('/user/<username>')
def profile(username):
    return f'User {username}'


	•	Converters:
Specify variable types:

@app.route('/post/<int:post_id>')
def show_post(post_id):
    return f'Post {post_id}'

HTTP Methods

By default, routes respond to GET requests. To handle other methods, specify them in the route decorator:

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        return 'Handling POST request'
    else:
        return 'Handling GET request'

Accessing Request Data

Use the request object to access data sent by the client.

from flask import request

@app.route('/submit', methods=['POST'])
def submit():
    data = request.form['key']
    return f'Data received: {data}'

Rendering Templates

Flask uses Jinja2 templating engine.
	1.	Create a Template
	•	Place HTML files in a templates directory.

<!-- templates/index.html -->
<!doctype html>
<title>{{ title }}</title>
<h1>{{ heading }}</h1>


	2.	Render the Template

from flask import render_template

@app.route('/')
def home():
    return render_template('index.html', title='Home', heading='Welcome!')

Static Files
	•	Store static files (CSS, JavaScript, images) in a static directory.
	•	Reference them in templates:

<link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">

Redirects and Errors
	•	Redirecting:

from flask import redirect, url_for

@app.route('/old-page')
def old_page():
    return redirect(url_for('new_page'))

@app.route('/new-page')
def new_page():
    return 'This is the new page.'


	•	Abort with Error Codes:

from flask import abort

@app.route('/secret')
def secret():
    abort(401)

Sessions
	•	Flask provides session support using secure cookies.

from flask import session

app.secret_key = 'your_secret_key'

@app.route('/login', methods=['POST'])
def login():
    session['username'] = request.form['username']
    return redirect(url_for('dashboard'))

@app.route('/dashboard')
def dashboard():
    if 'username' in session:
        return f"Logged in as {session['username']}"
    else:
        return redirect(url_for('login'))

Message Flashing
	•	Flash messages to the next request, typically used for error or status messages.

from flask import flash, get_flashed_messages

@app.route('/submit', methods=['POST'])
def submit():
    flash('Form submitted successfully!')
    return redirect(url_for('index'))

@app.route('/')
def index():
    messages = get_flashed_messages()
    return render_template('index.html', messages=messages)

Blueprints
	•	Organize your application into reusable components.

from flask import Blueprint

bp = Blueprint('bp', __name__, url_prefix='/bp')

@bp.route('/hello')
def hello():
    return 'Hello from Blueprint!'

app.register_blueprint(bp)

Error Handling
	•	Customize error pages.

@app.errorhandler(404)
def page_not_found(error):
    return render_template('404.html'), 404

Working with Databases
	•	Flask does not have built-in database support but can integrate with extensions like Flask-SQLAlchemy.

from flask_sqlalchemy import SQLAlchemy

app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///database.db'
db = SQLAlchemy(app)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)

    def __repr__(self):
        return f'<User {self.username}>'

db.create_all()

Forms with Flask-WTF
	•	Use Flask-WTF extension for form handling and CSRF protection.

from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, SubmitField
from wtforms.validators import DataRequired

class LoginForm(FlaskForm):
    username = StringField('Username', validators=[DataRequired()])
    password = PasswordField('Password', validators=[DataRequired()])
    submit = SubmitField('Login')

Configuration
	•	Use configuration files or objects to manage app settings.

class Config:
    DEBUG = True
    SECRET_KEY = 'your_secret_key'

app.config.from_object(Config)

Deployment
	•	For production, use a WSGI server like Gunicorn or uWSGI.

pip install gunicorn
gunicorn -w 4 your_app:app

Common Flask Extensions
	•	Flask-Login: User session management.
	•	Flask-Migrate: Database migrations.
	•	Flask-Mail: Sending emails.
	•	Flask-Bootstrap: Bootstrap integration.

Security Best Practices
	•	Keep SECRET_KEY Secure: Used for sessions and cookies.
	•	Validate User Input: Protect against injection attacks.
	•	Use HTTPS: Secure data transmission.

Further Reading
	•	Flask Documentation: https://flask.palletsprojects.com/en/stable/
	•	Flask Mega-Tutorial: In-depth guide to Flask.

Quick Reference Code
	•	Basic Flask App Template:

from flask import Flask, render_template, request, redirect, url_for, session

app = Flask(__name__)
app.secret_key = 'your_secret_key'

@app.route('/')
def home():
    return render_template('index.html')

if __name__ == '__main__':
    app.run(debug=True)
